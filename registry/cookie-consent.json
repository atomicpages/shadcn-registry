{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cookie-consent",
  "type": "registry:component",
  "title": "Cookie Consent",
  "description": "A simple cookie consent component.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "dialog",
    "switch",
    "button",
    "badge"
  ],
  "files": [
    {
      "path": "./src/components/molecules/cookie-consent.tsx",
      "content": "// heavily inspired by https://github.com/r2hu1/shadcn-cookie-consent\n// thanks r2hu1!\n\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { CookieIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/components/atoms/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\n\ntype CookieConsentProps = {\n  onAcceptCallback?: VoidFunction;\n  onDeclineCallback?: VoidFunction;\n  onSavePreferences: SaveFunction;\n  config?: ConfigRow[];\n};\n\nconst setCookie = () =>\n  (document.cookie =\n    \"cookie-consent=true; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/\");\n\nconst CookieContent = () => (\n  <p className=\"text-sm font-normal text-start\">\n    We use cookies to ensure you get the best experience on our website. For\n    more information on how we use cookies, please see our privacy policy.\n  </p>\n);\n\ntype SaveFunction = <\n  T extends Record<string, boolean> = Record<string, boolean>,\n>(\n  config: T,\n) => void;\n\ntype ConfigRow = {\n  title: string;\n  name: string;\n  alwaysEnabled?: boolean;\n  checked?: boolean;\n};\n\nconst CookieOptionRow: React.FC<ConfigRow> = ({\n  title,\n  name,\n  alwaysEnabled,\n  checked,\n}) => {\n  return (\n    <div className=\"flex justify-between items-center w-full p-3 rounded-md bg-zinc-100\">\n      <p className=\"text-sm\">{title}</p>\n      <span className=\"inline-flex gap-x-4\">\n        {alwaysEnabled && (\n          <Badge variant=\"secondary\" className=\"bg-white\">\n            Always enabled\n          </Badge>\n        )}\n        <Switch\n          name={name}\n          defaultChecked={alwaysEnabled ?? checked}\n          disabled={alwaysEnabled}\n        />\n      </span>\n    </div>\n  );\n};\n\nconst CookieConsentManager: React.FC<{\n  onAcceptAll?: VoidFunction;\n  onRejectAll?: VoidFunction;\n  onSavePreferences: SaveFunction;\n  config: ConfigRow[];\n}> = ({ config, onAcceptAll, onRejectAll, onSavePreferences }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button onClick={() => setOpen(!open)} variant=\"ghost\" auto>\n          Manage preferences\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <form\n          className=\"flex flex-col gap-y-4\"\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            const data = Object.fromEntries(new FormData(document.forms[0]));\n\n            onSavePreferences(\n              Object.entries(data).reduce(\n                (acc, [key, value]) => {\n                  acc[key] = value === \"on\";\n\n                  return acc;\n                },\n                {} as Record<string, boolean>,\n              ),\n            );\n\n            setCookie();\n            setOpen(false);\n          }}>\n          <DialogHeader>\n            <DialogTitle>Consent preferences</DialogTitle>\n          </DialogHeader>\n          <div className=\"border-t border-border pt-4\">\n            <CookieContent />\n          </div>\n          {config.map((opts) => (\n            <CookieOptionRow key={opts.name} {...opts} />\n          ))}\n          <DialogFooter className=\"flex w-full gap-x-4 mt-6\">\n            <div className=\"flex-grow w-full\">\n              <Button\n                variant=\"secondary\"\n                onClick={() => {\n                  onAcceptAll?.();\n                  setOpen(false);\n                }}>\n                Accept all\n              </Button>\n              <Button\n                variant=\"secondary\"\n                onClick={() => {\n                  onRejectAll?.();\n                  setOpen(false);\n                }}>\n                Reject all\n              </Button>\n            </div>\n            <Button type=\"submit\" variant=\"default\">\n              Save preferences\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst defaultConfig: ConfigRow[] = [\n  {\n    title: \"Strictly necessary cookies\",\n    name: \"default-cookies\",\n    alwaysEnabled: true,\n    checked: true,\n  },\n  {\n    title: \"Analytics cookies\",\n    name: \"analytics\",\n    checked: true,\n  },\n];\n\nexport const CookieConsent: React.FC<CookieConsentProps> = ({\n  onAcceptCallback,\n  onDeclineCallback,\n  onSavePreferences,\n  config = defaultConfig,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [hide, setHide] = useState(false);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    setCookie();\n\n    setTimeout(() => {\n      setHide(true);\n    }, 700);\n  }, []);\n\n  const accept = useCallback(() => {\n    close();\n    onAcceptCallback?.();\n  }, [onAcceptCallback]);\n\n  const decline = useCallback(() => {\n    close();\n    onDeclineCallback?.();\n  }, [onDeclineCallback]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    if (document.cookie.includes(\"cookie-consent=true\")) {\n      setIsOpen(false);\n\n      setTimeout(() => {\n        setHide(true);\n      }, 700);\n    }\n  }, []);\n\n  return (\n    <div\n      suppressHydrationWarning\n      className={cn(\n        \"fixed z-10 bottom-0 left-0 right-0 sm:left-4 sm:bottom-4 w-full sm:max-w-md duration-700\",\n        !isOpen\n          ? \"transition-[opacity,transform] translate-y-8 opacity-0\"\n          : \"transition-[opacity,transform] translate-y-0 opacity-100\",\n        hide && \"hidden\",\n      )}>\n      <div className=\"dark:bg-card bg-background rounded-md m-3 border border-border shadow-lg\">\n        <div className=\"grid gap-2\">\n          <div className=\"border-b border-border h-14 flex items-center justify-between p-4\">\n            <h1 className=\"text-lg font-medium\">We use cookies</h1>\n            <CookieIcon className=\"h-[1.2rem] w-[1.2rem]\" />\n          </div>\n          <div className=\"p-4\">\n            <CookieContent />\n            <p>\n              <br />\n              <br />\n              <span className=\"text-xs\">\n                By clicking &ldquo;\n                <span className=\"font-medium opacity-80\">Accept</span>\n                &rdquo;, you agree to our use of cookies.\n              </span>\n              <br />\n              <a href=\"#\" className=\"text-xs underline\">\n                Learn more.\n              </a>\n            </p>\n          </div>\n          <div className=\"flex gap-2 p-4 py-5 border-t border-border flex-col dark:bg-background/20\">\n            <Button onClick={() => accept()} className=\"w-full\">\n              Accept\n            </Button>\n            <Button onClick={decline} className=\"w-full\" variant=\"secondary\">\n              Decline\n            </Button>\n\n            <CookieConsentManager\n              onRejectAll={decline}\n              onAcceptAll={accept}\n              onSavePreferences={(config) => {\n                close();\n                onSavePreferences(config);\n              }}\n              config={config}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}